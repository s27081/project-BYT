services:
    fastapi:
        build:
            context: ../src/backend/FastAPI
            dockerfile: Dockerfile-fastapi
        environment:
            DATABASE_URL: postgresql://postgres:${POSTGRES_PWD}@db:5432/appDB
        restart: always
        ports:
            - 80:80
        volumes:
            - ./backend/FastAPI/app:/code/app
        networks:
            - app_network

    db:
        image: postgres:17
        restart: always
        #volumes:
        #     - postgres-volume/var/lib/postgresql/data
        environment:
            POSTGRES_PASSWORD: ${POSTGRES_PWD}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_BD: ${POSTGRES_DB}
        ports:
            - 5432:5432
        networks:
            - app_network
    adminer:
       image: adminer:latest
       restart: always
       depends_on: 
           - db
       ports:
       - 8080:8080
       networks:
           - app_network

    client:
        build:
            context: ../src/frontend/client
            dockerfile: Dockerfile-client
        environment:
            NEXT_PUBLIC_SIGNINURL: ${NEXT_PUBLIC_SIGNINURL}
            NEXT_PUBLIC_SIGNUPURL: ${NEXT_PUBLIC_SIGNUPURL}
            NEXT_PUBLIC_CURRENTUSERURL: ${NEXT_PUBLIC_CURRENTUSERURL}
            NEXT_SERVER_SIGNINURL: ${NEXT_SERVER_SIGNINURL}
            NEXT_SERVER_SIGNUPURL: ${NEXT_SERVER_SIGNUPURL}
            NEXT_SERVER_CURRENTUSERURL: ${NEXT_SERVER_CURRENTUSERURL}
            NEXT_SERVER_JOINGROUPURL: "${NEXT_SERVER_JOINGROUPURL}"
            NEXT_PUBLIC_JOINGROUPURL: "${NEXT_PUBLIC_JOINGROUPURL}"
            NEXT_SERVER_SHOWUSERGROUP: "${NEXT_SERVER_SHOWUSERGROUP}"
            NEXT_PUBLIC_SHOWUSERGROUP: "${NEXT_PUBLIC_SHOWUSERGROUP}"
            NEXT_PUBLIC_DELETEUSERFROMGROUP: "${NEXT_PUBLIC_DELETEUSERFROMGROUP}"
            NEXT_SERVER_DELETEUSERFROMGROUP: "${NEXT_SERVER_DELETEUSERFROMGROUP}"
            NEXT_PUBLIC_ADDGROUPURL: "${NEXT_PUBLIC_ADDGROUPURL}"
            NEXT_SERVER_ADDGROUPURL: "${NEXT_SERVER_ADDGROUPURL}"
            NEXT_SERVER_SHOWUSERSINGROUP: "${NEXT_SERVER_SHOWUSERSINGROUP}"
            NEXT_PUBLIC_SHOWUSERSINGROUP: "${NEXT_PUBLIC_SHOWUSERSINGROUP}"
        restart: always
        ports:
            - 3000:3000
        volumes:
            - ./frontend/client:/client
            - /client/node_modules
        networks:
            - app_network

    auth:
        build:
            context: ../src/frontend/AuthenticationService
            dockerfile: Dockerfile-auth
        environment:
            URL: ${URL}
            DBHOST: ${DBHOST}
            DBPORT: ${DBPORT}
            DBUSER: ${DBUSER}
            DBPASSWORD: ${DBPASSWORD}
            DBDATABASE: ${DBDATABASE}
            JWTKEY: ${JWTKEY}
            BCRYPT_SALT_ROUNDS: ${BCRYPT_SALT_ROUNDS}
        restart: always
        depends_on: 
            - db
        ports:
            - 3001:3001
        volumes:
            - ./frontend/AuthenticationService:/AuthenticationService
        networks:
            - app_network

    class:
        build:
            context: ../src/frontend/ClassService
            dockerfile: Dockerfile-class
        environment:
            URL: ${URL}
            DBHOST: ${DBHOST}
            DBPORT: ${DBPORT}
            DBUSER: ${DBUSER}
            DBPASSWORD: ${DBPASSWORD}
            DBDATABASE: ${DBDATABASE}
            JWTKEY: ${JWTKEY}
            BCRYPT_SALT_ROUNDS: ${BCRYPT_SALT_ROUNDS}
        restart: always
        depends_on: 
            - db
        ports:
            - 3002:3002
        volumes:
            - ./frontend/ClassService:/ClassService
        networks:
            - app_network

networks:
    app_network:
        driver: bridge
